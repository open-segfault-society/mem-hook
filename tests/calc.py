import statistics

""" Mem-hook - test_alloc_time custom backtrace"""

data = [
    {16: 178.616, 32: 170.103, 64: 170.792, 128: 190.24, 256: 241.228, 512: 347.293, 1024: 544.725, 4096: 1725.88, 65536: 2095.67, },
    {16: 179.56, 32: 173.364, 64: 173.954, 128: 192.597, 256: 243.328, 512: 353.481, 1024: 574.261, 4096: 1774.59, 65536: 2163.72, },
    {16: 172.785, 32: 171.146, 64: 175.07, 128: 189.33, 256: 253.314, 512: 345.971, 1024: 559.121, 4096: 1772.83, 65536: 2152.39, },
    {16: 182.325, 32: 187.64, 64: 182.868, 128: 205.668, 256: 256.363, 512: 369.231, 1024: 576.143, 4096: 1843.47, 65536: 2211.85, },
    {16: 178.428, 32: 178, 64: 194.66, 128: 202.735, 256: 288.976, 512: 340.49, 1024: 564.802, 4096: 1814.41, 65536: 2252.73, },
    {16: 185.109, 32: 186.235, 64: 186.614, 128: 194.274, 256: 261.783, 512: 353.806, 1024: 559.343, 4096: 1781.75, 65536: 2938.65, },
    {16: 186.041, 32: 192.423, 64: 268.857, 128: 279.275, 256: 260.458, 512: 363.422, 1024: 582.795, 4096: 1819.87, 65536: 2195.76, },
    {16: 177.994, 32: 217.066, 64: 179.88, 128: 197.72, 256: 242.604, 512: 361.035, 1024: 756.014, 4096: 1786.41, 65536: 2151.85, },
    {16: 193.219, 32: 171.196, 64: 192.961, 128: 196.934, 256: 259.674, 512: 349.334, 1024: 567.025, 4096: 1831.95, 65536: 2206.61, },
    {16: 173.153, 32: 179.797, 64: 170.853, 128: 210.261, 256: 243.698, 512: 1045.85, 1024: 811.252, 4096: 2496.13, 65536: 3080.3, },
]

""" Mem-hook - test_alloc_time glibc backtrace"""
data2 = [
    {16: 1674.18, 32: 1659.35, 64: 1680.65, 128: 1691.76, 256: 1742.45, 512: 1829.93, 1024: 2049.85, 4096: 3238.89, 65536: 3593, },
    {16: 1680.88, 32: 3334.29, 64: 3385.74, 128: 3445.97, 256: 3474.78, 512: 1930.21, 1024: 2220.44, 4096: 3478.58, 65536: 3810.79, },
    {16: 1718.24, 32: 1779.53, 64: 1769.8, 128: 1759.61, 256: 1791.14, 512: 1904.45, 1024: 2152.18, 4096: 3384.25, 65536: 3761.27, },
    {16: 1786.29, 32: 1783.11, 64: 1727.25, 128: 1792.59, 256: 1790.14, 512: 1945.42, 1024: 4081.02, 4096: 3523.33, 65536: 4019.35, },
    {16: 1741.07, 32: 1756.58, 64: 1783.53, 128: 1731.46, 256: 1853.95, 512: 1960.03, 1024: 2287.11, 4096: 3399.08, 65536: 3804.98, },
    {16: 1618.04, 32: 3202.16, 64: 3252.46, 128: 3252.14, 256: 3349.11, 512: 3469.8, 1024: 3096.85, 4096: 5259.85, 65536: 5799, },
    {16: 1685.86, 32: 1719.99, 64: 1722.33, 128: 1722.42, 256: 1764.49, 512: 1906.63, 1024: 2129.07, 4096: 3441.44, 65536: 3768.46, },
    {16: 1631.33, 32: 1615.52, 64: 1618.48, 128: 1642.73, 256: 1690.72, 512: 1792.87, 1024: 2002.67, 4096: 3233.15, 65536: 3573.6, },
    {16: 1712.77, 32: 1710.94, 64: 1710.18, 128: 1761.07, 256: 1827.32, 512: 1891.39, 1024: 2061.29, 4096: 3425.91, 65536: 3809.68, },
    {16: 1748.53, 32: 1766.67, 64: 1713.75, 128: 1724.31, 256: 1815.23, 512: 1929.74, 1024: 2123.03, 4096: 3385.73, 65536: 3860.58, },
]

# Collect values per allocation size
per_size = {}
for test in data2:
    for size, value in test.items():
        per_size.setdefault(size, []).append(value)

# Calculate median per size
medians = {size: statistics.median(values) for size, values in per_size.items()}

# Display nicely
for size in sorted(medians):
    print(f"Size {size:>6}: Median time = {medians[size]:.3f}")
